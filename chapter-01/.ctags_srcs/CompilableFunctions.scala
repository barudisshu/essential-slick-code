package slick.lifted

import slick.basic.BasicProfile

trait CompilableFunctions extends CompilableLowPriority {
  implicit def function2IsCompilable[A1, A2, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2), P, (A1, A2)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2) => B, CompiledFunction[(A1, A2) => B, (A1, A2), P, B, U]] = new Compilable[(A1, A2) => B, CompiledFunction[(A1, A2) => B, (A1, A2), P, B, U]] {
    def compiled(raw: (A1, A2) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2) => B, (A1, A2), P, B, U](raw, ((f: (A1, A2) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2)]], profile)
  }
  implicit def function3IsCompilable[A1, A2, A3, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3), P, (A1, A2, A3)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3) => B, CompiledFunction[(A1, A2, A3) => B, (A1, A2, A3), P, B, U]] = new Compilable[(A1, A2, A3) => B, CompiledFunction[(A1, A2, A3) => B, (A1, A2, A3), P, B, U]] {
    def compiled(raw: (A1, A2, A3) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3) => B, (A1, A2, A3), P, B, U](raw, ((f: (A1, A2, A3) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3)]], profile)
  }
  implicit def function4IsCompilable[A1, A2, A3, A4, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4), P, (A1, A2, A3, A4)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4) => B, CompiledFunction[(A1, A2, A3, A4) => B, (A1, A2, A3, A4), P, B, U]] = new Compilable[(A1, A2, A3, A4) => B, CompiledFunction[(A1, A2, A3, A4) => B, (A1, A2, A3, A4), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4) => B, (A1, A2, A3, A4), P, B, U](raw, ((f: (A1, A2, A3, A4) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4)]], profile)
  }
  implicit def function5IsCompilable[A1, A2, A3, A4, A5, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5), P, (A1, A2, A3, A4, A5)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5) => B, CompiledFunction[(A1, A2, A3, A4, A5) => B, (A1, A2, A3, A4, A5), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5) => B, CompiledFunction[(A1, A2, A3, A4, A5) => B, (A1, A2, A3, A4, A5), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5) => B, (A1, A2, A3, A4, A5), P, B, U](raw, ((f: (A1, A2, A3, A4, A5) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5)]], profile)
  }
  implicit def function6IsCompilable[A1, A2, A3, A4, A5, A6, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6), P, (A1, A2, A3, A4, A5, A6)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6) => B, (A1, A2, A3, A4, A5, A6), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6) => B, (A1, A2, A3, A4, A5, A6), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6) => B, (A1, A2, A3, A4, A5, A6), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6)]], profile)
  }
  implicit def function7IsCompilable[A1, A2, A3, A4, A5, A6, A7, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7), P, (A1, A2, A3, A4, A5, A6, A7)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7) => B, (A1, A2, A3, A4, A5, A6, A7), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7) => B, (A1, A2, A3, A4, A5, A6, A7), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7) => B, (A1, A2, A3, A4, A5, A6, A7), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7)]], profile)
  }
  implicit def function8IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8), P, (A1, A2, A3, A4, A5, A6, A7, A8)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8) => B, (A1, A2, A3, A4, A5, A6, A7, A8), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8) => B, (A1, A2, A3, A4, A5, A6, A7, A8), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8) => B, (A1, A2, A3, A4, A5, A6, A7, A8), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8)]], profile)
  }
  implicit def function9IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9)]], profile)
  }
  implicit def function10IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]], profile)
  }
  implicit def function11IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]], profile)
  }
  implicit def function12IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]], profile)
  }
  implicit def function13IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]], profile)
  }
  implicit def function14IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]], profile)
  }
  implicit def function15IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]], profile)
  }
  implicit def function16IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]], profile)
  }
  implicit def function17IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]], profile)
  }
  implicit def function18IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]], profile)
  }
  implicit def function19IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]], profile)
  }
  implicit def function20IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]], profile)
  }
  implicit def function21IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]], profile)
  }
  implicit def function22IsCompilable[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, B <: Rep[_], P, U](implicit ashape: Shape[ColumnsShapeLevel, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)], pshape: Shape[ColumnsShapeLevel, P, P, _], bexe: Executable[B, U]): Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), P, B, U]] = new Compilable[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => B, CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), P, B, U]] {
    def compiled(raw: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => B, profile: BasicProfile) =
      new CompiledFunction[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => B, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), P, B, U](raw, ((f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => B) => f.tupled), pshape.asInstanceOf[Shape[ColumnsShapeLevel, P, P, (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]], profile)
  }
}
